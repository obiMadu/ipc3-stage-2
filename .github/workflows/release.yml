name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers the workflow on version tags (e.g., v1.0.0)

permissions: 
    contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Extract tag version
      id: extract_tag
      run: echo "TAG_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV


    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.22'
        
    - name: Run Unit Tests
      run: |
            go test ./internals/handlers

    - name: Build for Windows
      run: |
        CGO_ENABLED=0 GOOS=windows GOARCH=386 go build -o api-app-$(echo $TAG_VERSION).exe ./cmd/api
        mkdir -p release
        mv api-app-$(echo $TAG_VERSION).exe release/

    - name: Build for Linux
      run: |
        CGO_ENABLED=0 go build -o api-app-$(echo $TAG_VERSION) ./cmd/api
        mv api-app-$(echo $TAG_VERSION) release/

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Linux Build Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/api-app-$(echo $TAG_VERSION)
        asset_name: api-app-$(echo $TAG_VERSION)
        asset_content_type: application/octet-stream

    - name: Upload Windows Build Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/api-app-$(echo $TAG_VERSION).exe
        asset_name: api-app-$(echo $TAG_VERSION).exe
        asset_content_type: application/octet-stream


